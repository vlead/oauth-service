#+TITLE: Deploying the CAS Service on a server
#+AUTHOR: Shubh
#+DATE: [2017-10-30 Mon]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document will illustrate installation of all the dependencies required
  for setting up the CAS application for the deployment phase.

* Starting the virtual environment
  We will use the vagrant box provided by VLEAD to set up the server
  The link to set up the box is given [[https://github.com/vlead/setup-ovpl-centos/blob/develop/user-docs/run-ads-using-vagrant-box.org][here]]
  
  We will be using ADS to auto deploy our service.
  Current password : =vargrant=

* Set up the proxy
** Basic setup on .bashrc
  Export the following variables
  #+name: bashrc
  #+BEGIN_SRC proxy
  export HTTP_PROXY=http://proxy.iiit.ac.in:8080/
  export http_proxy=http://proxy.iiit.ac.in:8080/
  export FTP_PROXY=http://proxy.iiit.ac.in:8080/
  export all_proxy=socks://proxy.iiit.ac.in:8080/
  export HTTPS_PROXY=http://proxy.iiit.ac.in:8080/
  export https_proxy=http://proxy.iiit.ac.in:8080/
  export  no_proxy=::1,localhost,127.0.0.1/8,0.0.0.0,iiit.ac.in,*.iiit.ac.in,iiit.net,*.iiit.net,iiith.org,172.16.0.0/12,192.168.0.0/16,10.0.0.0/8
  export ALL_PROXY=socks://proxy.iiit.ac.in:8080/
  export  ftp_proxy=http://proxy.iiit.ac.in:8080/
  #+END_SRC

** Apt-get 
   Add the following lines to /etc/apt/apt.conf
   #+name: apt
   #+BEGIN_SRC proxy 
   echo Acquire::http::proxy \"http://proxy.iiit.ac.in:8080/\"\; >> /etc/apt/apt.conf
   echo Acquire::https::proxy \"https://proxy.iiit.ac.in:8080/\"\; >> /etc/apt/apt.conf
   #+END_SRC
   
* Install JDK-8, systemd, maven 
** Open-JDK-8 
   This is the version of java used to build the application
** Systemd 
   Installed to create and run services on the OS
** Maven
  Maven is the Java Managment Tool, in our service we have used maven
  to download, maintain and build the CAS module.
  
  Note: We are using Maven3 so only install that otherwise we might
  get dependencies issue with Maven 2 or Msven 1
*** Setiting proxy in Maven 
   For maven to download all the dependencies on a proxy netowrk
   1. Open /etc/maven/settings.xml 
   2. Go to the proxies section 
   3. Add 
      #+BEGIN_EXAMPLE
      <proxy>
      <active>true</active>
      <protocol>http</protocol>
      <username>proxyuser</username>
      <password>proxypass</password>
      <host>proxy.iiit.ac.in</host>
      <port>8080</port>
      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
      </proxy>
      #+END_EXAMPLE
   
** Script to install
#+name: installation
#+BEGIN_SRC deployment
sudo -E add-apt-repository ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install openjdk-8-source systemd maven
#+END_SRC
*** More than 1 version of java
If you have more than 1 version of java use
#+BEGIN_SRC 
sudo update-alternatives --config java
#+END_SRC

* Install Tomcat
** To install tomcat 
We must have to add it as a group user 
#+name: install_tomcat
#+BEGIN_SRC deployment
sudo groupadd tomcat
sudo mkdir /opt/tomcat
sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat
cd /tmp
sudo curl -O http://redrockdigimark.com/apachemirror/tomcat/tomcat-8/v8.5.23/bin/apache-tomcat-8.5.23.zip  -x http://proxy.iiit.ac.in:8080 
unzip apache-tomcat-8.5.23.zip
sudo mv apache-tomcat-8.5.23/* /opt/tomcat/
cd /opt/tomcat
sudo chgrp -R tomcat /opt/tomcat
sudo chmod -R g+r conf
sudo chmod g+x conf
sudo chown -R tomcat webapps/ work/ temp/ logs/
sudo chgrp -R tomcat bin
sudo chmod g+rwx bin
sudo chmod g+r bin/*
sudo chmod +x bin/*.sh
#+END_SRC

** Create a systemd file for tomcat 
*** Find out and update the JAVA_HOME env variable
#+BEGIN_SRC :tangle setup.sh 
export JAVA_HOME=$(sudo update-java-alternatives -l | cut -d ' ' -f 3)
JAVA_HOME+="/jre"
echo $JAVA_HOME
sudo emacs /etc/systemd/system/tomcat.service
#+END_SRC 
*** Add the following lines to /etc/systemd/system/tomcat.serivce
Also update the JAVA_HOME
#+BEGIN_EXAMPLE
[Unit]
Description=Apache Tomcat Web Application Container
After=network.target

[Service]
Type=forking

Environment=JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre
Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid
Environment=CATALINA_HOME=/opt/tomcat
Environment=CATALINA_BASE=/opt/tomcat
Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'
Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'

ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/opt/tomcat/bin/shutdown.sh

User=tomcat
Group=tomcat
UMask=0007
RestartSec=10
Restart=always

[Install]
WantedBy=multi-user.target
#+END_EXAMPLE
*** Start and enable tomcat 
Once tomcat is added and the permisssions are set, start tomcat and if
the status is =running=, enable it so we dont have to start it after
every time we boot
   #+BEGIN_SRC 
sudo systemctl start tomcat
sudo systemctl status tomcat
sudo systemctl enable tomcat
   #+END_SRC

** Update the cache size
   As CAS is a large application make sure to update the CAS cache size
   Go to /opt/conf/context.xml ({catlina_base}/conf/context.xml) 
   #+BEGIN_SRC 
   <?xml version='1.0' encoding='utf-8'?>
<Context>
	<Resources cachingAllowed="true" cacheMaxSize="81920" />
</Context>
   #+END_SRC
* Script to stepup the server
  For giving the basic configuration to the cas we need to the take the following steps
** Generate new certificates and save them
*** Use existing keys
    Copy the thekeystore file to /etc/cas
   #+name: add_keys
   #+BEGIN_SRC deployment
    mkdir -p /etc/cas/
   cp ../../../src/vlead-cas-overlay/public_private_keys/thekeystore /etc/cas/
   #+END_SRC
*** Generate new keys
    To generate new keys, make a keystore, export a cert, and then import them to /jre/security/cacerts
    [[https://apereo.github.io/cas/developer/Build-Process.html#configure-ssl][Link]] to give a better understanding 
  
  #+BEGIN_EXAMPLE
  sudo keytool -genkey -alias cas -keyalg RSA -validity 999 -keystore /etc/cas/thekeystore -ext san=dns:$REPLACE_WITH_FULL_MACHINE_NAME
  # Export the certificate into a file
  sudo keytool -export -file /etc/cas/config/cas.crt -keystore /etc/cas/thekeystore -alias cas

  # Import the certificate into the global keystore
  sudo keytool -import -file /etc/cas/config/cas.crt -alias cas -keystore $JAVA_HOME/jre/lib/security/cacerts
  #+END_EXAMPLE

** Update the App Id and secret 
*** [[./google_oauth_configuration.org][Goolge Setup]]
    
*** Facebook Setup 
    Follow the guide:https://developers.facebook.com/docs/facebook-login/
    Replace the values present [[../vlead-cas-overlay/vlead-cas-server/src/main/resources/deployerConfigContext.xml][here]]
    After successful setup enable the app: https://stackoverflow.com/questions/21775198/facebook-api-this-app-is-in-development-mode
*** Twitter Setup 
    For twitter we just need the Id and Secret from their site, their
    is no need to setup callback url. 
    Replace those with the one present [[../vlead-cas-overlay/vlead-cas-server/src/main/resources/deployerConfigContext.xml][here]]
** Copy the configurations to the build directory 
   Once everything is setup we will have to copy the configurations
   #+name: copy_files
   #+BEGIN_SRC deployment
   cd ~/oauth-service
   sudo mkdir -p /etc/cas/
   sudo cp -r src/vlead-cas-overlay/etc/cas/* /etc/cas/*
   cp -r src/vlead-cas-overlay/vlead-cas-server/src/main/resources/deployerConfigContext.xml build/code/vlead-cas-overlay/vlead-cas-server/src/main/resources/
   cp -r src/vlead-cas-overlay/vlead-cas-server/src/main/resources/log4j2.xml build/code/vlead-cas-overlay/vlead-cas-server/src/main/resources/
   cp -r src/vlead-cas-overlay/vlead-cas-server/src/main/webapp/WEB-INF/templates build/code/vlead-cas-overlay/vlead-cas-server/src/main/resources/
   #+END_SRC
   
* Pull the Repo and make it 

#+name: make_emacs
#+BEGIN_SRC deployment

cd build/code/vlead-cas-overlay
chmod +x run.sh 
./run.sh

#+END_SRC



    
* Tangle                                                        :boilerplate:

#+BEGIN_SRC deployment  :tangle setup.sh :eval no :noweb yes
<<installation>>
<<install_tomcat>>
<<add_keys>>
<<copy_files>>
<<make_emacs>>
#+END_SRC

#+BEGIN_SRC proxy :tangle proxy.sh :eval no :noweb yes
<<bashrc>>
<<apt>>
#+END_SRC
